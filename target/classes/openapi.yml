openapi: 3.0.1
info:
  title: Teensy
  description: Tiny Url Generator
  version: 1.0.0
  contact:
    name: Tejas Ozarkar
    email: tejozarkar@gmail.com
servers:
  - url: http://localhost:8080
    description: Local Environment
  - url: http://teensyapi-env.eba-k2xfeapv.ap-south-1.elasticbeanstalk.com
    description: Production Environment
paths:
  /group/all:
    get:
      summary: Get all groups of user
      operationId: getAllGroups
      responses:
        200:
          description: Get all Groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupResponse'
  /group/{groupId}:
    get:
      tags:
        - group
      summary: Get selected card
      operationId: getGroupInfo
      responses:
        200:
          description: Get Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
      parameters:
        - name: groupId
          in: path
          description: Id of Group
          required: true
          schema:
            type: integer
    delete:
      summary: Delete selected card
      operationId: deleteGroup
      responses:
        200:
          description: Delete Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
      parameters:
        - name: groupId
          in: path
          description: Id of Group
          required: true
          schema:
            type: integer
  /group:
    post:
      summary: Crate New Group
      operationId: createGroup
      requestBody:
        description: Create New Group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDto'
        required: true
      responses:
        200:
          description: New Group Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
    get:
      summary: Get all groups of user
      operationId: getUserGroups
      responses:
        200:
          description: Get user groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupResponse'
  /card:
    post:
      summary: Crate New Card
      operationId: createCard
      requestBody:
        description: Create Card
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequest'
        required: true
      responses:
        200:
          description: New Card as Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
    get:
      summary: Get all cards of user
      operationId: getUserCards
      responses:
        200:
          description: Get user cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponse'
    patch:
      summary: Edit the Card
      operationId: editCard
      requestBody:
        description: Edit Card
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCardDto'
        required: true
      responses:
        200:
          description: Edit the card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
  /card/{cardId}:
    delete:
      summary: Delete selected card
      operationId: deleteCard()
      responses:
        200:
          description: Delete Card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
      parameters:
        - name: cardId
          in: path
          description: Id of card
          required: true
          schema:
            type: integer
  /card/{groupId}:
    get:
      summary: Delete selected card
      operationId: getGroupCards
      responses:
        200:
          description: Get Group Cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponse'
      parameters:
        - name: groupId
          in: path
          description: Id of group
          required: true
          schema:
            type: integer
  /url/{shortUrl}:
    get:
      summary: Get Long Url
      operationId: getLongUrl
      responses:
        200:
          description: Return Long Url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrlResponseDto'
      parameters:
        - name: shortUrl
          in: path
          description: Short Url
          required: true
          schema:
            type: string
  /url:
    post:
      summary: Crate Tiny Url
      operationId: createTinyUrl
      requestBody:
        description: Create Tiny Url
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrlRequestDto'
        required: true
      responses:
        200:
          description: Url Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrlResponseDto'
  /auth/signup:
    post:
      summary:
      operationId: signup
      requestBody:
        description: Create new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        200:
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
  /auth/user:
    get:
      summary: Get User Info
      operationId: getUserInfo
      responses:
        200:
          description: Return User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        401:
          description: Unauthorized User

  /auth/signin:
    post:
      summary:
      operationId: signin
      requestBody:
        description: Logging in user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        200:
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

components:
  schemas:
    UrlRequestDto:
      type: object
      properties:
        longurl:
          type: string
    UrlResponseDto:
      type: object
      properties:
        shorturl:
          type: string
        longurl:
          type: string
    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        jwt:
          type: string
        username:
          type: string
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
    UserDto:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        username:
          type: string
        password:
          type: string
        email:
          type: string
    CardDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        icon:
          type: string
    UpdateCardDto:
      allOf:
        - $ref: '#/components/schemas/CardDto'
      type: object
      properties:
        longurl:
          type: string
    CardRequest:
      allOf:
        - $ref: '#/components/schemas/CardDto'
      type: object
      properties:
        longurl:
          type: string
        groupid:
          type: integer
    CardResponse:
      allOf:
        - $ref: '#/components/schemas/CardRequest'
        - $ref: '#/components/schemas/UrlResponseDto'
      type: object
      properties:
        id:
          type: integer
        urlid:
          type: integer
        groupid:
          type: integer
        grouptitle:
          type: string
        groupdescription:
          type: string
    GroupDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    GroupResponse:
      allOf:
        - $ref: '#/components/schemas/GroupDto'
      type: object
      properties:
        id:
          type: integer
    GenericResponse:
      type: object
      properties:
        message:
          type: string
