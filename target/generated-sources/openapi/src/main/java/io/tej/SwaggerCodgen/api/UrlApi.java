/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.tej.SwaggerCodgen.api;

import io.tej.SwaggerCodgen.model.ModelApiResponse;
import io.tej.SwaggerCodgen.model.UrlDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-09-11T00:49:19.168624400+05:30[Asia/Calcutta]")

@Validated
@Api(value = "url", description = "the url API")
public interface UrlApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /url : null
     *
     * @param urlDto Create Tiny Url (required)
     * @return Url Created (status code 200)
     */
    @ApiOperation(value = "null", nickname = "createTinyUrl", notes = "", response = ModelApiResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Url Created", response = ModelApiResponse.class) })
    @RequestMapping(value = "/url",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ModelApiResponse> _createTinyUrl(@ApiParam(value = "Create Tiny Url" ,required=true )  @Valid @RequestBody UrlDto urlDto) {
        return createTinyUrl(urlDto);
    }

    // Override this method
    default  ResponseEntity<ModelApiResponse> createTinyUrl(UrlDto urlDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /url : Get All Tiny Urls
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Get All Tiny Urls", nickname = "getUrls", notes = "", response = UrlDto.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UrlDto.class, responseContainer = "List") })
    @RequestMapping(value = "/url",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<UrlDto>> _getUrls() {
        return getUrls();
    }

    // Override this method
    default  ResponseEntity<List<UrlDto>> getUrls() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"shorturl\" : \"shorturl\", \"longurl\" : \"longurl\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
