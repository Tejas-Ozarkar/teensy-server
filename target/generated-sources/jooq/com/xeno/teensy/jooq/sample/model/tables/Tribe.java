/*
 * This file is generated by jOOQ.
 */
package com.xeno.teensy.jooq.sample.model.tables;


import com.xeno.teensy.jooq.sample.model.Indexes;
import com.xeno.teensy.jooq.sample.model.Keys;
import com.xeno.teensy.jooq.sample.model.Teensy;
import com.xeno.teensy.jooq.sample.model.tables.records.TribeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tribe extends TableImpl<TribeRecord> {

    private static final long serialVersionUID = -1300456980;

    /**
     * The reference instance of <code>teensy.tribe</code>
     */
    public static final Tribe TRIBE = new Tribe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TribeRecord> getRecordType() {
        return TribeRecord.class;
    }

    /**
     * The column <code>teensy.tribe.id</code>.
     */
    public final TableField<TribeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>teensy.tribe.title</code>.
     */
    public final TableField<TribeRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>teensy.tribe.description</code>.
     */
    public final TableField<TribeRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>teensy.tribe.userId</code>.
     */
    public final TableField<TribeRecord, Integer> USERID = createField(DSL.name("userId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>teensy.tribe</code> table reference
     */
    public Tribe() {
        this(DSL.name("tribe"), null);
    }

    /**
     * Create an aliased <code>teensy.tribe</code> table reference
     */
    public Tribe(String alias) {
        this(DSL.name(alias), TRIBE);
    }

    /**
     * Create an aliased <code>teensy.tribe</code> table reference
     */
    public Tribe(Name alias) {
        this(alias, TRIBE);
    }

    private Tribe(Name alias, Table<TribeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tribe(Name alias, Table<TribeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tribe(Table<O> child, ForeignKey<O, TribeRecord> key) {
        super(child, key, TRIBE);
    }

    @Override
    public Schema getSchema() {
        return Teensy.TEENSY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRIBE_PRIMARY, Indexes.TRIBE_USERID);
    }

    @Override
    public Identity<TribeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRIBE;
    }

    @Override
    public UniqueKey<TribeRecord> getPrimaryKey() {
        return Keys.KEY_TRIBE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TribeRecord>> getKeys() {
        return Arrays.<UniqueKey<TribeRecord>>asList(Keys.KEY_TRIBE_PRIMARY);
    }

    @Override
    public List<ForeignKey<TribeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TribeRecord, ?>>asList(Keys.TRIBE_IBFK_1);
    }

    public User user() {
        return new User(this, Keys.TRIBE_IBFK_1);
    }

    @Override
    public Tribe as(String alias) {
        return new Tribe(DSL.name(alias), this);
    }

    @Override
    public Tribe as(Name alias) {
        return new Tribe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tribe rename(String name) {
        return new Tribe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tribe rename(Name name) {
        return new Tribe(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
