/*
 * This file is generated by jOOQ.
 */
package com.xeno.teensy.jooq.sample.model.tables;


import com.xeno.teensy.jooq.sample.model.Indexes;
import com.xeno.teensy.jooq.sample.model.Keys;
import com.xeno.teensy.jooq.sample.model.Teensy;
import com.xeno.teensy.jooq.sample.model.tables.records.TribeAdminRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TribeAdmin extends TableImpl<TribeAdminRecord> {

    private static final long serialVersionUID = -2047843789;

    /**
     * The reference instance of <code>teensy.tribe_admin</code>
     */
    public static final TribeAdmin TRIBE_ADMIN = new TribeAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TribeAdminRecord> getRecordType() {
        return TribeAdminRecord.class;
    }

    /**
     * The column <code>teensy.tribe_admin.id</code>.
     */
    public final TableField<TribeAdminRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>teensy.tribe_admin.userId</code>.
     */
    public final TableField<TribeAdminRecord, Integer> USERID = createField(DSL.name("userId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>teensy.tribe_admin.groupId</code>.
     */
    public final TableField<TribeAdminRecord, Integer> GROUPID = createField(DSL.name("groupId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>teensy.tribe_admin</code> table reference
     */
    public TribeAdmin() {
        this(DSL.name("tribe_admin"), null);
    }

    /**
     * Create an aliased <code>teensy.tribe_admin</code> table reference
     */
    public TribeAdmin(String alias) {
        this(DSL.name(alias), TRIBE_ADMIN);
    }

    /**
     * Create an aliased <code>teensy.tribe_admin</code> table reference
     */
    public TribeAdmin(Name alias) {
        this(alias, TRIBE_ADMIN);
    }

    private TribeAdmin(Name alias, Table<TribeAdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private TribeAdmin(Name alias, Table<TribeAdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TribeAdmin(Table<O> child, ForeignKey<O, TribeAdminRecord> key) {
        super(child, key, TRIBE_ADMIN);
    }

    @Override
    public Schema getSchema() {
        return Teensy.TEENSY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRIBE_ADMIN_GROUPID, Indexes.TRIBE_ADMIN_PRIMARY, Indexes.TRIBE_ADMIN_USERID);
    }

    @Override
    public Identity<TribeAdminRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRIBE_ADMIN;
    }

    @Override
    public UniqueKey<TribeAdminRecord> getPrimaryKey() {
        return Keys.KEY_TRIBE_ADMIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<TribeAdminRecord>> getKeys() {
        return Arrays.<UniqueKey<TribeAdminRecord>>asList(Keys.KEY_TRIBE_ADMIN_PRIMARY);
    }

    @Override
    public List<ForeignKey<TribeAdminRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TribeAdminRecord, ?>>asList(Keys.TRIBE_ADMIN_IBFK_1, Keys.TRIBE_ADMIN_IBFK_2);
    }

    public User user() {
        return new User(this, Keys.TRIBE_ADMIN_IBFK_1);
    }

    public Tribe tribe() {
        return new Tribe(this, Keys.TRIBE_ADMIN_IBFK_2);
    }

    @Override
    public TribeAdmin as(String alias) {
        return new TribeAdmin(DSL.name(alias), this);
    }

    @Override
    public TribeAdmin as(Name alias) {
        return new TribeAdmin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TribeAdmin rename(String name) {
        return new TribeAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TribeAdmin rename(Name name) {
        return new TribeAdmin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
