/*
 * This file is generated by jOOQ.
 */
package com.xeno.teensy.jooq.sample.model.tables;


import com.xeno.teensy.jooq.sample.model.Indexes;
import com.xeno.teensy.jooq.sample.model.Keys;
import com.xeno.teensy.jooq.sample.model.Teensy;
import com.xeno.teensy.jooq.sample.model.tables.records.CardRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Card extends TableImpl<CardRecord> {

    private static final long serialVersionUID = 1521778522;

    /**
     * The reference instance of <code>teensy.card</code>
     */
    public static final Card CARD = new Card();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardRecord> getRecordType() {
        return CardRecord.class;
    }

    /**
     * The column <code>teensy.card.id</code>.
     */
    public final TableField<CardRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>teensy.card.title</code>.
     */
    public final TableField<CardRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>teensy.card.description</code>.
     */
    public final TableField<CardRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>teensy.card.icon</code>.
     */
    public final TableField<CardRecord, String> ICON = createField(DSL.name("icon"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>teensy.card.urlId</code>.
     */
    public final TableField<CardRecord, Integer> URLID = createField(DSL.name("urlId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>teensy.card.groupId</code>.
     */
    public final TableField<CardRecord, Integer> GROUPID = createField(DSL.name("groupId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>teensy.card</code> table reference
     */
    public Card() {
        this(DSL.name("card"), null);
    }

    /**
     * Create an aliased <code>teensy.card</code> table reference
     */
    public Card(String alias) {
        this(DSL.name(alias), CARD);
    }

    /**
     * Create an aliased <code>teensy.card</code> table reference
     */
    public Card(Name alias) {
        this(alias, CARD);
    }

    private Card(Name alias, Table<CardRecord> aliased) {
        this(alias, aliased, null);
    }

    private Card(Name alias, Table<CardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Card(Table<O> child, ForeignKey<O, CardRecord> key) {
        super(child, key, CARD);
    }

    @Override
    public Schema getSchema() {
        return Teensy.TEENSY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CARD_GROUPID, Indexes.CARD_PRIMARY, Indexes.CARD_URLID);
    }

    @Override
    public Identity<CardRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CARD;
    }

    @Override
    public UniqueKey<CardRecord> getPrimaryKey() {
        return Keys.KEY_CARD_PRIMARY;
    }

    @Override
    public List<UniqueKey<CardRecord>> getKeys() {
        return Arrays.<UniqueKey<CardRecord>>asList(Keys.KEY_CARD_PRIMARY);
    }

    @Override
    public List<ForeignKey<CardRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CardRecord, ?>>asList(Keys.CARD_IBFK_1, Keys.CARD_IBFK_2);
    }

    public Url url() {
        return new Url(this, Keys.CARD_IBFK_1);
    }

    public Tribe tribe() {
        return new Tribe(this, Keys.CARD_IBFK_2);
    }

    @Override
    public Card as(String alias) {
        return new Card(DSL.name(alias), this);
    }

    @Override
    public Card as(Name alias) {
        return new Card(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(String name) {
        return new Card(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(Name name) {
        return new Card(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
