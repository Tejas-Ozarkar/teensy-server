/*
 * This file is generated by jOOQ.
 */
package com.xeno.teensy.jooq.sample.model.tables;


import com.xeno.teensy.jooq.sample.model.Indexes;
import com.xeno.teensy.jooq.sample.model.Keys;
import com.xeno.teensy.jooq.sample.model.Teensy;
import com.xeno.teensy.jooq.sample.model.tables.records.ApprovalRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Approval extends TableImpl<ApprovalRecord> {

    private static final long serialVersionUID = 1343192066;

    /**
     * The reference instance of <code>teensy.approval</code>
     */
    public static final Approval APPROVAL = new Approval();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApprovalRecord> getRecordType() {
        return ApprovalRecord.class;
    }

    /**
     * The column <code>teensy.approval.id</code>.
     */
    public final TableField<ApprovalRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>teensy.approval.title</code>.
     */
    public final TableField<ApprovalRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>teensy.approval.description</code>.
     */
    public final TableField<ApprovalRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>teensy.approval.icon</code>.
     */
    public final TableField<ApprovalRecord, String> ICON = createField(DSL.name("icon"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>teensy.approval.longurl</code>.
     */
    public final TableField<ApprovalRecord, String> LONGURL = createField(DSL.name("longurl"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>teensy.approval.userId</code>.
     */
    public final TableField<ApprovalRecord, Integer> USERID = createField(DSL.name("userId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>teensy.approval.cardId</code>.
     */
    public final TableField<ApprovalRecord, Integer> CARDID = createField(DSL.name("cardId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>teensy.approval.groupId</code>.
     */
    public final TableField<ApprovalRecord, Integer> GROUPID = createField(DSL.name("groupId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>teensy.approval</code> table reference
     */
    public Approval() {
        this(DSL.name("approval"), null);
    }

    /**
     * Create an aliased <code>teensy.approval</code> table reference
     */
    public Approval(String alias) {
        this(DSL.name(alias), APPROVAL);
    }

    /**
     * Create an aliased <code>teensy.approval</code> table reference
     */
    public Approval(Name alias) {
        this(alias, APPROVAL);
    }

    private Approval(Name alias, Table<ApprovalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Approval(Name alias, Table<ApprovalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Approval(Table<O> child, ForeignKey<O, ApprovalRecord> key) {
        super(child, key, APPROVAL);
    }

    @Override
    public Schema getSchema() {
        return Teensy.TEENSY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APPROVAL_CARDID, Indexes.APPROVAL_GROUPID, Indexes.APPROVAL_PRIMARY, Indexes.APPROVAL_USERID);
    }

    @Override
    public Identity<ApprovalRecord, Integer> getIdentity() {
        return Keys.IDENTITY_APPROVAL;
    }

    @Override
    public UniqueKey<ApprovalRecord> getPrimaryKey() {
        return Keys.KEY_APPROVAL_PRIMARY;
    }

    @Override
    public List<UniqueKey<ApprovalRecord>> getKeys() {
        return Arrays.<UniqueKey<ApprovalRecord>>asList(Keys.KEY_APPROVAL_PRIMARY);
    }

    @Override
    public List<ForeignKey<ApprovalRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ApprovalRecord, ?>>asList(Keys.APPROVAL_IBFK_1, Keys.APPROVAL_IBFK_2, Keys.APPROVAL_IBFK_3);
    }

    public User user() {
        return new User(this, Keys.APPROVAL_IBFK_1);
    }

    public Card card() {
        return new Card(this, Keys.APPROVAL_IBFK_2);
    }

    public Tribe tribe() {
        return new Tribe(this, Keys.APPROVAL_IBFK_3);
    }

    @Override
    public Approval as(String alias) {
        return new Approval(DSL.name(alias), this);
    }

    @Override
    public Approval as(Name alias) {
        return new Approval(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Approval rename(String name) {
        return new Approval(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Approval rename(Name name) {
        return new Approval(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
